/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.Annotation.AnnotationPath;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationLinkRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnnotationLink extends TableImpl<AnnotationLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_link</code>
     */
    public static final AnnotationLink ANNOTATION_LINK = new AnnotationLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationLinkRecord> getRecordType() {
        return AnnotationLinkRecord.class;
    }

    /**
     * The column <code>stroom.annotation_link.id</code>.
     */
    public final TableField<AnnotationLinkRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_link.fk_annotation_src_id</code>.
     */
    public final TableField<AnnotationLinkRecord, Long> FK_ANNOTATION_SRC_ID = createField(DSL.name("fk_annotation_src_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_link.fk_annotation_dst_id</code>.
     */
    public final TableField<AnnotationLinkRecord, Long> FK_ANNOTATION_DST_ID = createField(DSL.name("fk_annotation_dst_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AnnotationLink(Name alias, Table<AnnotationLinkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AnnotationLink(Name alias, Table<AnnotationLinkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>stroom.annotation_link</code> table reference
     */
    public AnnotationLink(String alias) {
        this(DSL.name(alias), ANNOTATION_LINK);
    }

    /**
     * Create an aliased <code>stroom.annotation_link</code> table reference
     */
    public AnnotationLink(Name alias) {
        this(alias, ANNOTATION_LINK);
    }

    /**
     * Create a <code>stroom.annotation_link</code> table reference
     */
    public AnnotationLink() {
        this(DSL.name("annotation_link"), null);
    }

    public <O extends Record> AnnotationLink(Table<O> path, ForeignKey<O, AnnotationLinkRecord> childPath, InverseForeignKey<O, AnnotationLinkRecord> parentPath) {
        super(path, childPath, parentPath, ANNOTATION_LINK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AnnotationLinkPath extends AnnotationLink implements Path<AnnotationLinkRecord> {
        public <O extends Record> AnnotationLinkPath(Table<O> path, ForeignKey<O, AnnotationLinkRecord> childPath, InverseForeignKey<O, AnnotationLinkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AnnotationLinkPath(Name alias, Table<AnnotationLinkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AnnotationLinkPath as(String alias) {
            return new AnnotationLinkPath(DSL.name(alias), this);
        }

        @Override
        public AnnotationLinkPath as(Name alias) {
            return new AnnotationLinkPath(alias, this);
        }

        @Override
        public AnnotationLinkPath as(Table<?> alias) {
            return new AnnotationLinkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationLinkRecord, Long> getIdentity() {
        return (Identity<AnnotationLinkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationLinkRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_LINK_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnnotationLinkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANNOTATION_LINK_FK_ANNOTATION_SRC_ID_FK_ANNOTATION_DST_ID);
    }

    @Override
    public List<ForeignKey<AnnotationLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOTATION_LINK_FK_ANNOTATION_SRC_ID, Keys.ANNOTATION_LINK_FK_ANNOTATION_DST_ID);
    }

    private transient AnnotationPath _annotationLinkFkAnnotationSrcId;

    /**
     * Get the implicit join path to the <code>stroom.annotation</code> table,
     * via the <code>annotation_link_fk_annotation_src_id</code> key.
     */
    public AnnotationPath annotationLinkFkAnnotationSrcId() {
        if (_annotationLinkFkAnnotationSrcId == null)
            _annotationLinkFkAnnotationSrcId = new AnnotationPath(this, Keys.ANNOTATION_LINK_FK_ANNOTATION_SRC_ID, null);

        return _annotationLinkFkAnnotationSrcId;
    }

    private transient AnnotationPath _annotationLinkFkAnnotationDstId;

    /**
     * Get the implicit join path to the <code>stroom.annotation</code> table,
     * via the <code>annotation_link_fk_annotation_dst_id</code> key.
     */
    public AnnotationPath annotationLinkFkAnnotationDstId() {
        if (_annotationLinkFkAnnotationDstId == null)
            _annotationLinkFkAnnotationDstId = new AnnotationPath(this, Keys.ANNOTATION_LINK_FK_ANNOTATION_DST_ID, null);

        return _annotationLinkFkAnnotationDstId;
    }

    @Override
    public AnnotationLink as(String alias) {
        return new AnnotationLink(DSL.name(alias), this);
    }

    @Override
    public AnnotationLink as(Name alias) {
        return new AnnotationLink(alias, this);
    }

    @Override
    public AnnotationLink as(Table<?> alias) {
        return new AnnotationLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationLink rename(String name) {
        return new AnnotationLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationLink rename(Name name) {
        return new AnnotationLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationLink rename(Table<?> name) {
        return new AnnotationLink(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationLink where(Condition condition) {
        return new AnnotationLink(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationLink where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationLink where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationLink where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationLink where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationLink where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationLink where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationLink where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationLink whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationLink whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
