/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.Annotation.AnnotationPath;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationSubscriptionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnnotationSubscription extends TableImpl<AnnotationSubscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_subscription</code>
     */
    public static final AnnotationSubscription ANNOTATION_SUBSCRIPTION = new AnnotationSubscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationSubscriptionRecord> getRecordType() {
        return AnnotationSubscriptionRecord.class;
    }

    /**
     * The column <code>stroom.annotation_subscription.id</code>.
     */
    public final TableField<AnnotationSubscriptionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_subscription.fk_annotation_id</code>.
     */
    public final TableField<AnnotationSubscriptionRecord, Long> FK_ANNOTATION_ID = createField(DSL.name("fk_annotation_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_subscription.user_uuid</code>.
     */
    public final TableField<AnnotationSubscriptionRecord, String> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private AnnotationSubscription(Name alias, Table<AnnotationSubscriptionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AnnotationSubscription(Name alias, Table<AnnotationSubscriptionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>stroom.annotation_subscription</code> table
     * reference
     */
    public AnnotationSubscription(String alias) {
        this(DSL.name(alias), ANNOTATION_SUBSCRIPTION);
    }

    /**
     * Create an aliased <code>stroom.annotation_subscription</code> table
     * reference
     */
    public AnnotationSubscription(Name alias) {
        this(alias, ANNOTATION_SUBSCRIPTION);
    }

    /**
     * Create a <code>stroom.annotation_subscription</code> table reference
     */
    public AnnotationSubscription() {
        this(DSL.name("annotation_subscription"), null);
    }

    public <O extends Record> AnnotationSubscription(Table<O> path, ForeignKey<O, AnnotationSubscriptionRecord> childPath, InverseForeignKey<O, AnnotationSubscriptionRecord> parentPath) {
        super(path, childPath, parentPath, ANNOTATION_SUBSCRIPTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AnnotationSubscriptionPath extends AnnotationSubscription implements Path<AnnotationSubscriptionRecord> {
        public <O extends Record> AnnotationSubscriptionPath(Table<O> path, ForeignKey<O, AnnotationSubscriptionRecord> childPath, InverseForeignKey<O, AnnotationSubscriptionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AnnotationSubscriptionPath(Name alias, Table<AnnotationSubscriptionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AnnotationSubscriptionPath as(String alias) {
            return new AnnotationSubscriptionPath(DSL.name(alias), this);
        }

        @Override
        public AnnotationSubscriptionPath as(Name alias) {
            return new AnnotationSubscriptionPath(alias, this);
        }

        @Override
        public AnnotationSubscriptionPath as(Table<?> alias) {
            return new AnnotationSubscriptionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationSubscriptionRecord, Long> getIdentity() {
        return (Identity<AnnotationSubscriptionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationSubscriptionRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_SUBSCRIPTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnnotationSubscriptionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANNOTATION_SUBSCRIPTION_FK_ANNOTATION_ID_USER_UUID);
    }

    @Override
    public List<ForeignKey<AnnotationSubscriptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOTATION_SUBSCRIPTION_FK_ANNOTATION_ID);
    }

    private transient AnnotationPath _annotation;

    /**
     * Get the implicit join path to the <code>stroom.annotation</code> table.
     */
    public AnnotationPath annotation() {
        if (_annotation == null)
            _annotation = new AnnotationPath(this, Keys.ANNOTATION_SUBSCRIPTION_FK_ANNOTATION_ID, null);

        return _annotation;
    }

    @Override
    public AnnotationSubscription as(String alias) {
        return new AnnotationSubscription(DSL.name(alias), this);
    }

    @Override
    public AnnotationSubscription as(Name alias) {
        return new AnnotationSubscription(alias, this);
    }

    @Override
    public AnnotationSubscription as(Table<?> alias) {
        return new AnnotationSubscription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationSubscription rename(String name) {
        return new AnnotationSubscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationSubscription rename(Name name) {
        return new AnnotationSubscription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationSubscription rename(Table<?> name) {
        return new AnnotationSubscription(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationSubscription where(Condition condition) {
        return new AnnotationSubscription(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationSubscription where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationSubscription where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationSubscription where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationSubscription where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationSubscription where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationSubscription where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationSubscription where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationSubscription whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationSubscription whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
