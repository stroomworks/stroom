/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationFeedRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnnotationFeed extends TableImpl<AnnotationFeedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_feed</code>
     */
    public static final AnnotationFeed ANNOTATION_FEED = new AnnotationFeed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationFeedRecord> getRecordType() {
        return AnnotationFeedRecord.class;
    }

    /**
     * The column <code>stroom.annotation_feed.id</code>.
     */
    public final TableField<AnnotationFeedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_feed.name</code>.
     */
    public final TableField<AnnotationFeedRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private AnnotationFeed(Name alias, Table<AnnotationFeedRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AnnotationFeed(Name alias, Table<AnnotationFeedRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>stroom.annotation_feed</code> table reference
     */
    public AnnotationFeed(String alias) {
        this(DSL.name(alias), ANNOTATION_FEED);
    }

    /**
     * Create an aliased <code>stroom.annotation_feed</code> table reference
     */
    public AnnotationFeed(Name alias) {
        this(alias, ANNOTATION_FEED);
    }

    /**
     * Create a <code>stroom.annotation_feed</code> table reference
     */
    public AnnotationFeed() {
        this(DSL.name("annotation_feed"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationFeedRecord, Integer> getIdentity() {
        return (Identity<AnnotationFeedRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationFeedRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_FEED_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnnotationFeedRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANNOTATION_FEED_ANNOTATION_FEED_NAME);
    }

    @Override
    public AnnotationFeed as(String alias) {
        return new AnnotationFeed(DSL.name(alias), this);
    }

    @Override
    public AnnotationFeed as(Name alias) {
        return new AnnotationFeed(alias, this);
    }

    @Override
    public AnnotationFeed as(Table<?> alias) {
        return new AnnotationFeed(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationFeed rename(String name) {
        return new AnnotationFeed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationFeed rename(Name name) {
        return new AnnotationFeed(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationFeed rename(Table<?> name) {
        return new AnnotationFeed(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationFeed where(Condition condition) {
        return new AnnotationFeed(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationFeed where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationFeed where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationFeed where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationFeed where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationFeed where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationFeed where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationFeed where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationFeed whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationFeed whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
