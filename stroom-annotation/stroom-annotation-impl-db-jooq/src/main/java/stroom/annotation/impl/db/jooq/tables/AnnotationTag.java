/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.Annotation.AnnotationPath;
import stroom.annotation.impl.db.jooq.tables.AnnotationTagLink.AnnotationTagLinkPath;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationTagRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnnotationTag extends TableImpl<AnnotationTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_tag</code>
     */
    public static final AnnotationTag ANNOTATION_TAG = new AnnotationTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationTagRecord> getRecordType() {
        return AnnotationTagRecord.class;
    }

    /**
     * The column <code>stroom.annotation_tag.id</code>.
     */
    public final TableField<AnnotationTagRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_tag.uuid</code>.
     */
    public final TableField<AnnotationTagRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_tag.type_id</code>.
     */
    public final TableField<AnnotationTagRecord, Byte> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_tag.name</code>.
     */
    public final TableField<AnnotationTagRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_tag.style_id</code>.
     */
    public final TableField<AnnotationTagRecord, Byte> STYLE_ID = createField(DSL.name("style_id"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>stroom.annotation_tag.deleted</code>.
     */
    public final TableField<AnnotationTagRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private AnnotationTag(Name alias, Table<AnnotationTagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AnnotationTag(Name alias, Table<AnnotationTagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>stroom.annotation_tag</code> table reference
     */
    public AnnotationTag(String alias) {
        this(DSL.name(alias), ANNOTATION_TAG);
    }

    /**
     * Create an aliased <code>stroom.annotation_tag</code> table reference
     */
    public AnnotationTag(Name alias) {
        this(alias, ANNOTATION_TAG);
    }

    /**
     * Create a <code>stroom.annotation_tag</code> table reference
     */
    public AnnotationTag() {
        this(DSL.name("annotation_tag"), null);
    }

    public <O extends Record> AnnotationTag(Table<O> path, ForeignKey<O, AnnotationTagRecord> childPath, InverseForeignKey<O, AnnotationTagRecord> parentPath) {
        super(path, childPath, parentPath, ANNOTATION_TAG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AnnotationTagPath extends AnnotationTag implements Path<AnnotationTagRecord> {
        public <O extends Record> AnnotationTagPath(Table<O> path, ForeignKey<O, AnnotationTagRecord> childPath, InverseForeignKey<O, AnnotationTagRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AnnotationTagPath(Name alias, Table<AnnotationTagRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AnnotationTagPath as(String alias) {
            return new AnnotationTagPath(DSL.name(alias), this);
        }

        @Override
        public AnnotationTagPath as(Name alias) {
            return new AnnotationTagPath(alias, this);
        }

        @Override
        public AnnotationTagPath as(Table<?> alias) {
            return new AnnotationTagPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationTagRecord, Integer> getIdentity() {
        return (Identity<AnnotationTagRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationTagRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_TAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnnotationTagRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANNOTATION_TAG_ANNOTATION_TAG_UUID_IDX, Keys.KEY_ANNOTATION_TAG_ANNOTATION_TAG_TYPE_ID_NAME_IDX);
    }

    private transient AnnotationTagLinkPath _annotationTagLink;

    /**
     * Get the implicit to-many join path to the
     * <code>stroom.annotation_tag_link</code> table
     */
    public AnnotationTagLinkPath annotationTagLink() {
        if (_annotationTagLink == null)
            _annotationTagLink = new AnnotationTagLinkPath(this, null, Keys.ANNOTATION_TAG_LINK_FK_ANNOTATION_TAG_ID.getInverseKey());

        return _annotationTagLink;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>stroom.annotation</code> table
     */
    public AnnotationPath annotation() {
        return annotationTagLink().annotation();
    }

    @Override
    public AnnotationTag as(String alias) {
        return new AnnotationTag(DSL.name(alias), this);
    }

    @Override
    public AnnotationTag as(Name alias) {
        return new AnnotationTag(alias, this);
    }

    @Override
    public AnnotationTag as(Table<?> alias) {
        return new AnnotationTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationTag rename(String name) {
        return new AnnotationTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationTag rename(Name name) {
        return new AnnotationTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationTag rename(Table<?> name) {
        return new AnnotationTag(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationTag where(Condition condition) {
        return new AnnotationTag(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationTag where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationTag where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationTag where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationTag where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationTag where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationTag where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationTag where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationTag whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationTag whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
