import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
//        maven {
//            url "https://repo1.maven.org/maven2"
//        }
    }
    dependencies {
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    //plugin for downloading content from the 'net
    id "de.undercouch.download" version "3.2.0" apply false

    //plugin for producing a tree of task dependencies, run task 'taskTree'
    id "com.dorongold.task-tree" version "1.3.1" apply true

    id "com.github.johnrengelman.shadow" version "2.0.1" apply false

    id 'nu.studer.jooq' version '3.0.2' apply false

    id 'org.flywaydb.flyway' version '5.2.4' apply false
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '4.1'
//}

apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'de.undercouch.download'

if(JavaVersion.current() != JavaVersion.VERSION_1_8){
    throw new GradleException("This build must be run with java 8")
}

ext.stroomPluginsDir = System.getProperty("user.home") + "/.stroom/plugins"
ext.stroomContentImportDir = System.getProperty("user.home") + "/.stroom/contentPackImport"

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

ext.gwtCompilerProps = [
    mainClass: 'stroom.gwt.GwtCompilerWrapper',
    minHeap: getPropertyOrDefault('gwtCompilerMinHeap', '1G'),
    maxHeap: getPropertyOrDefault('gwtCompilerMaxHeap', '4G'),
    workers: getPropertyOrDefault('gwtCompilerWorkers', '5')
]

//version numbers for libs that share version numbers, e.g. dropwizard-*, or for github repo release versions
ext.versions = [
    //----------Stroom-----------------
    stroom: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------Stroom-repos---------------
//    stroomProxyRepo: 'v5.1-beta.8',
    eventLogging: '3.3.1_schema-v3.3.1',
    hadoopCommonShaded: '2.6.4-9',
    hadoopHdfsShaded: '2.6.4-7',
    stroomAuth: '6.0.32', // Needed for the correct version of the client API
    stroomExpression: '1.5.15',
    stroomQuery: '2.2.24', // Same version for both stroom-query-api and stroom-query-common
    stroomStats: '1.0-alpha.6',
    stroomProxyApi: '5.1.6',

    //------------3rd-party------------
    curator: '4.2.0', // Curator 4 works with ZK 3.4.x in soft compatibility mode, i.e. you must exlude its dep on ZK and explicitly add one for 3.4.x
    dropwizard: '1.3.14', //if you change this version you should check the versions below that need to move in sync with it
    dropwizard_metrics: '4.0.5', //should be kept in step with dropwizard
    gwt: '2.8.2',
    hibernate: '4.3.8.Final', //dropwiz 1.3.14 uses -validator 5.4.3.Final and -core 5.2.18.Final
    hikari: '3.2.0',
    jackson: '2.9.9',
    jersey: '2.25.1',
    jetty: '9.4.18.v20190429', //in line with dropwizard 1.3.14
    jooq: '3.11.9',
    logback: '1.2.3', //in line with dropwizard 1.3.14
    lucene: '5.5.3',
    slf4j: '1.7.26', //in line with dropwizard 1.3.14
    spring: '4.3.4.RELEASE',
    swagger: '1.5.16',
    unirest: '1.4.9',
    zookeeper: '3.4.8', // Roughly pegged to the server version used by Cloudera, see links above. This version is forced below.
    zzDUMMYzz: 'makes sorting easier'
]

//dependency strings for use in sub projects
ext.libs = [
    //------Stroom-libs---------------
    eventLogging: "uk.gov.gchq.eventlogging:event-logging:$versions.eventLogging",
    stroomQueryApi: "uk.gov.gchq.stroom.query:stroom-query-api:$versions.stroomQuery",
    stroomQueryAudit: "uk.gov.gchq.stroom.query:stroom-query-audit:$versions.stroomQuery",
    stroomQueryCommon: "uk.gov.gchq.stroom.query:stroom-query-common:$versions.stroomQuery",
    stroomExpression: "uk.gov.gchq.stroom.expression:stroom-expression:$versions.stroomExpression",
    stroomStatsSchema: "uk.gov.gchq.stroom.stats:stroom-stats-schema:$versions.stroomStats",
    stroomAuthApi: "uk.gov.gchq.stroom.auth:stroom-auth-service-api:$versions.stroomAuth",
    stroomProxyRemoteApi: "uk.gov.gchq.stroom.proxy:stroom-proxy-remote-api:$versions.stroomProxyApi",
    hadoopCommonShaded: "uk.gov.gchq.stroom.hadoop.commons:hadoop-common-shaded:$versions.hadoopCommonShaded",
    hadoopHdfsShaded: "uk.gov.gchq.stroom.hadoop.hdfs:hadoop-hdfs-shaded:$versions.hadoopHdfsShaded",

    //------3rd Party-libs---------------
    aopalliance: "aopalliance:aopalliance:1.0",
    aspectjrt: "org.aspectj:aspectjrt:1.8.10",
    aspectjweaver: "org.aspectj:aspectjweaver:1.8.10",
    assertj_core: "org.assertj:assertj-core:3.8.0",
    c3p0: "com.mchange:c3p0:0.9.5.2",
    commons_compress: "org.apache.commons:commons-compress:1.12",
    commons_csv: "org.apache.commons:commons-csv:1.7",
    commons_fileupload: "commons-fileupload:commons-fileupload:1.3.2",
    commons_io: "commons-io:commons-io:2.5",
    commons_lang: "commons-lang:commons-lang:2.6",
    commons_pool2: "org.apache.commons:commons-pool2:2.4.2",
    curator_client: "org.apache.curator:curator-client:$versions.curator",
    curator_framework: "org.apache.curator:curator-framework:$versions.curator",
    curator_x_discovery: "org.apache.curator:curator-x-discovery:$versions.curator",
    dropwizard_assets: "io.dropwizard:dropwizard-assets:$versions.dropwizard"  ,
    dropwizard_client: "io.dropwizard:dropwizard-client:$versions.dropwizard",
    dropwizard_core: "io.dropwizard:dropwizard-core:$versions.dropwizard"  ,
    dropwizard_jersey: "io.dropwizard:dropwizard-jersey:$versions.dropwizard",
    dropwizard_jetty: "io.dropwizard:dropwizard-jetty:$versions.dropwizard", //was 1.0.6 now 1.1.0
    dropwizard_lifecycle: "io.dropwizard:dropwizard-lifecycle:$versions.dropwizard",
    dropwizard_metrics_annotation: "io.dropwizard.metrics:metrics-annotation:$versions.dropwizard_metrics",
    dropwizard_metrics_healthchecks: "io.dropwizard.metrics:metrics-healthchecks:$versions.dropwizard_metrics",
    dropwizard_servlets: "io.dropwizard:dropwizard-servlets:$versions.dropwizard",
    dropwizard_testing: "io.dropwizard:dropwizard-testing:$versions.dropwizard",
    findbugs_jsr: "com.google.code.findbugs:jsr305:3.0.1",
    dropwizard_configuration: "io.dropwizard:dropwizard-configuration:$versions.dropwizard",
    flyway_core: "org.flywaydb:flyway-core:5.2.4",
    gin: "com.google.gwt.inject:gin:2.1.2",
    guava: "com.google.guava:guava:21.0", //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
    guice4: "com.google.inject:guice:4.1.0",
    guice3: "com.google.inject:guice:3.0",
    gwt_dev: "com.google.gwt:gwt-dev:$versions.gwt",
    gwt_servlet: "com.google.gwt:gwt-servlet:$versions.gwt",
    gwt_user: "com.google.gwt:gwt-user:$versions.gwt",
    gwtp_mvp_client: "com.gwtplatform:gwtp-mvp-client:0.7",
    hamcrest_core: "org.hamcrest:hamcrest-core:1.3",
    hbase: "org.apache.hbase:hbase-common:2.1.5", //should be set to be consistent with CDH version
    hessian: "com.caucho:hessian:4.0.38",
    hikari: "com.zaxxer:HikariCP:$versions.hikari",
    hibernate_core: "org.hibernate:hibernate-core:$versions.hibernate" /* LATEST 5.2.5.Final */,
    hibernate_entitymanager: "org.hibernate:hibernate-entitymanager:$versions.hibernate" /* LATEST 5.2.5.Final */,
    hibernate_jpa_api: "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final",
    hibernate_validator: "org.hibernate:hibernate-validator:5.3.4.Final",
    http_client: "org.apache.httpcomponents:httpclient:4.5.6",
    hsqldb: "org.hsqldb:hsqldb:2.3.4",
    jBCrypt: "de.svenkubiak:jBCrypt:0.4.1",
    jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson",
    jackson_core: "com.fasterxml.jackson.core:jackson-core:$versions.jackson",
    jackson_databind: "com.fasterxml.jackson.core:jackson-databind:$versions.jackson", //was 2.8.5, now 2.8.6
    java_jwt: "com.auth0:java-jwt:3.1.0",
    javassist: "org.javassist:javassist:3.18.1-GA",
    javax_annotation_api: "javax.annotation:javax.annotation-api:1.2",
    javax_el: "org.glassfish:javax.el:3.0.1-b08",
    javax_el_api: "javax.el:javax.el-api:3.0.0",
    javax_inject: "javax.inject:javax.inject:1",
    javax_mail_api: "javax.mail:javax.mail-api:1.6.0",
    javax_persistence: "javax.persistence:persistence-api:1.0.2",
    javax_servlet_api: "javax.servlet:javax.servlet-api:3.1.0",
    javax_validation: 'javax.validation:validation-api:1.1.0.Final',
    jaxb_api: 'javax.xml.bind:jaxb-api:2.3.0',
    jcl_over_slf4j: "org.slf4j:jcl-over-slf4j:$versions.slf4j",
    jcommander: 'com.beust:jcommander:1.72',
    jersey_client: "org.glassfish.jersey.core:jersey-client:$versions.jersey",
    jersey_common: "org.glassfish.jersey.core:jersey-common:$versions.jersey",
    jersey_server: "org.glassfish.jersey.core:jersey-server:$versions.jersey", //was 2.25 now 2.25.1
    jetty_server: "org.eclipse.jetty:jetty-server:$versions.jetty",
    jetty_servlet: "org.eclipse.jetty:jetty-servlet:$versions.jetty",
    jetty_servlets: "org.eclipse.jetty:jetty-servlets:$versions.jetty",
    jooq: "org.jooq:jooq:$versions.jooq",
    jooq_codegen: "org.jooq:jooq-codegen:$versions.jooq",
    jooq_meta: "org.jooq:jooq-meta:$versions.jooq",
    jose4j: "org.bitbucket.b_c:jose4j:0.6.4",
    jul_to_slf4j: "org.slf4j:jul-to-slf4j:$versions.slf4j",
    junit: "junit:junit:4.12",
    log4j_over_slf4j: "org.slf4j:log4j-over-slf4j:$versions.slf4j",
    logback_classic: "ch.qos.logback:logback-classic:$versions.logback",
    logback_core: "ch.qos.logback:logback-core:$versions.logback",
    lucene_analyzers_common: "org.apache.lucene:lucene-analyzers-common:$versions.lucene",
    lucene_core: "org.apache.lucene:lucene-core:$versions.lucene",
    lucene_queryparser: "org.apache.lucene:lucene-queryparser:$versions.lucene",
    lucene_backward_codecs: "org.apache.lucene:lucene-backward-codecs:$versions.lucene",
    mockito_core: "org.mockito:mockito-core:2.0.2-beta",
    mysql_connector_java: "mysql:mysql-connector-java:8.0.15",
    okhttp: "com.squareup.okhttp3:okhttp:4.3.0",
    poi: "org.apache.poi:poi:3.17",
    poi_ooxml: "org.apache.poi:poi-ooxml:3.17",
    restygwt: "org.fusesource.restygwt:restygwt:2.2.6",
    saxon_he: "net.sf.saxon:Saxon-HE:9.7.0-21",
    slf4j_api: "org.slf4j:slf4j-api:$versions.slf4j",
    solrj: "org.apache.solr:solr-solrj:8.2.0",
    spring_aop: "org.springframework:spring-aop:$versions.spring",
    spring_aspects: "org.springframework:spring-aspects:$versions.spring",
    spring_beans: "org.springframework:spring-beans:$versions.spring",
    spring_context: "org.springframework:spring-context:$versions.spring",
    spring_context_support: "org.springframework:spring-context-support:$versions.spring",
    spring_core: "org.springframework:spring-core:$versions.spring",
    spring_jdbc: "org.springframework:spring-jdbc:$versions.spring",
    spring_orm: "org.springframework:spring-orm:$versions.spring",
    spring_test: "org.springframework:spring-test:$versions.spring",
    spring_tx: "org.springframework:spring-tx:$versions.spring",
    stax_api: "stax:stax-api:1.0.1",
    swagger_annotations: "io.swagger:swagger-annotations:$versions.swagger",
    unirest: "com.mashape.unirest:unirest-java:$versions.unirest",
    validation_api: "javax.validation:validation-api:1.0.0.GA", //GWT 2.8.0 throws errors on gwtCompile if validation-api 1.1.0.Final is used
    vavr: "io.vavr:vavr:0.9.0",
    ws_rs_api: "javax.ws.rs:javax.ws.rs-api:2.0.1",
    xml_apis: "xml-apis:xml-apis:1.0.b2",
    zookeeper: "org.apache.zookeeper:zookeeper:$versions.zookeeper",
    zzDUMMYzz: "makes sorting easier"
]

def contentPackDownloadDir = "${project.buildDir}/contentPackDownload"
ext.contentPackDownloadDir = contentPackDownloadDir
def contentPackImportDir = "${System.properties['user.home']}/.stroom/contentPackImport/"
ext.contentPackImportDir = contentPackImportDir
def contentReleasesUrl = "http://github.com/gchq/stroom-content/releases/download/"
def visualisationsContentPackVer = "v3.2.1"
def visualisationsContentPackUrl = "http://github.com/gchq/stroom-visualisations-dev/releases/download/${visualisationsContentPackVer}/visualisations-production-${visualisationsContentPackVer}.zip"

//A set of content packs to download in the task downloadStroomContent
ext.contentPacks = [
    'core-xml-schemas': 'v2.0',
    'event-logging-xml-schema': 'v3.2.3',
    'internal-dashboards': 'v1.1',
    'internal-statistics-sql': 'v2.1',
    'internal-statistics-stroom-stats': 'v2.1',
    'standard-pipelines': 'v0.1',
    'stroom-101': 'v1.0',
    'stroom-logs': 'v2.0-alpha.5',
    'template-pipelines': 'v0.2'
]

//defines a list of gradle projects that we will publish with maven/bintray
def projectsToBePublished = subprojects.findAll { project ->
    project.path in [
        ':stroom-entity-shared',
        ':stroom-util',
        ':stroom-util-shared',
        'zzDUMMYzz to ease sorting'
    ]
}

//defines a list of gradle project paths that need to expose their test jars for other
//projects to use
def projectsWithSharedTestJars = subprojects.findAll { project ->
    project.path in [
        ':stroom-core-server',
        ':stroom-dashboard-server',
        ':stroom-entity-shared',
        ':stroom-index-server',
        ':stroom-security-server',
        ':stroom-util',
        'zzDUMMYzz to ease sorting'
    ]
}

//list to hold details of any failed test classes
def failedTestReportFiles = []

//Configuration applicable to all projects
allprojects {
    // Make doclint be quiet - we don't care about JavaDoc warnings.
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

//Configuration applicable to all sub projects
subprojects {
    //println "Configuring subproject ${project.name}"

    apply plugin: 'java'
    apply plugin: 'ca.cutterslade.analyze' //analyze missing dependencies for the code base
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        // This lets us use different directories for our integration tests.
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    configurations {

        //ensure deps don't bring any logging implementations with them as this will
        //conflict with logback. Also replace any log4j deps with log4j-over-slf4j
        //so dependency jars work with slf4j
        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"
            exclude module: 'xercesImpl'

            resolutionStrategy {
                dependencySubstitution {
                    substitute module('log4j:log4j') with module("org.slf4j:log4j-over-slf4j:$versions.slf4j")
                }

                forcedModules = [
                    //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
                    //libs.guava

                    // Need to force our version of ZK else curator 4 will bring in a newer one
                    libs.zookeeper
                ]
            }
        }
        
        // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    repositories {
        mavenLocal()
        mavenCentral()
//        maven {
//            url "https://repo1.maven.org/maven2"
//        }
    }

    test {
        // Report duration of unit tests that take over 1s
        afterTest { desc, result -> 
            def durationSecs = (result.endTime - result.startTime) / 1000
            if (durationSecs > 1) {
                println "Test [${desc.className}.${desc.name}], took longer than 1s, result: ${result.resultType}, duration: ${durationSecs}s"
            }
        }
    }

    // This means the reports from our integration tests won't over-write the reports from our unit tests.
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

        afterSuite { desc, result -> 
            if (desc != null && desc.className != null && result.resultType.toString() == "FAILURE") {

                //test class failed so add its project info and test report file to a global list for
                //processing at the end of the build
                def reportFileName = "${reports.junitXml.destination}/TEST-${desc.className}.xml"
                def reportFile = file(reportFileName)
                def pair = new Tuple2("${project.name} ${desc.name}", reportFile)
                failedTestReportFiles.add(pair)
            }
        }

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    // This task lets us run the actual integration tests.
    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        // Integration tests are quite slow so output progress for each test to keep travis alive
        afterTest { desc, result -> 
            def durationSecs = (result.endTime - result.startTime) / 1000
            println "Tested [${desc.className}.${desc.name}], result: ${result.resultType}, duration: ${durationSecs}s"
        }
        
        //afterSuite { desc, result -> 
            //if (desc != null && desc.className != null && result.resultType.toString() == "FAILURE") {
                ////test class failed so add its project info and test report file to a global list for
                ////processing at the end of the build

                //def reportFileName = "${project.name}/build/test-results/integrationTest/TEST-${desc.className}.xml"
                //def reportFile = file(reportFileName)
                //def pair = new Tuple2("${project.name} ${desc.name}", reportFile)
                //failedTestReportFiles.add(pair)
            //}
        //}

        //Use full logging for test exceptions so we can see where the failure occurred 
        //testLogging {
            //events "failed"
            //exceptionFormat = 'full'
            //showStackTraces = true
        //}
    }

    task allDeps(type: DependencyReportTask) {}

    clean{
        //clear out the 'out' dirs used by intelliJ
        delete "out"
    }

    //ensure we download our libs before compiling java
    //tasks.compileJava.dependsOn downloadUrlDependencies

    // These lines pull the integration test task into our build process.
    tasks.check.dependsOn integrationTest
    tasks.integrationTest.mustRunAfter test
}

// configures only those projects in publishedProjectsPaths
configure(projectsToBePublished) {
    println "Configuring ${project.name} for publishing"

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = 'stroom'
    version = versions.stroom

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        scm {
            url "https://github.com/stroom/stroom"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

//    javadoc {
//        // this switch is needed in java10
//        options.addBooleanOption('html5', true)
//        options.addStringOption('Xdoclint:none', '-quiet')
//    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

//    afterEvaluate {
//        jar {
//            inputs.property("moduleName", moduleName)
//            manifest {
//                attributes(
//                        "Automatic-Module-Name": moduleName,
//                )
//            }
//        }
//    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    // configuration for the bintray plugin for uploading maven artifacts to bintray
    // see https://github.com/bintray/gradle-bintray-plugin
    // run task bintrayUpload to push the files, assuming BINTRAY_USER/KEY are set as env vars
    bintray {
        // Must never write these to log or system out
        user = System.getenv('BINTRAY_USER') // set in Travis UI
        key = System.getenv('BINTRAY_KEY') // set in Travis UI

        // The maven plugin publications to push to bintray
        publications = ['mavenJava']

        // immediately make the artifacts public
        publish = true

        pkg {
            repo = 'stroom'
            name = 'stroom'
            userOrg = 'stroom'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/gchq/stroom.git'
            version {
                name = "${versions.stroom}"
                desc = "stroom-${versions.stroom}"
                released = new Date()
                vcsTag = "${versions.stroom}"
                gpg {
                    // Bintray will self-sign the files
                    sign = true // Determines whether to GPG sign the files. The default is false
                }
            }
        }
    }
}

//configuration specific to projects that expose their test jars for other projects to use
configure(projectsWithSharedTestJars) {
    println "Configuring ${project.name} to expose its test jars"

    configurations {
        testArtifacts
    }

    task testJar(type: Jar) {
        baseName = "${project.name}-test"
        from sourceSets.test.output
    }

    artifacts {
        testArtifacts testJar
    }

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }

    artifacts.archives packageTests
}

// NOT SURE IF WE NEED THIS NOW
//configure(subprojects.findAll {it.name != 'stroom-app' && it.name != 'stroom-integrationtest'}) {
//    //swagger has to generate the spec from code so all modules except for stroom-app (which is the module the
//    //swagger task is in) and stroom-integrationtest (which depends on stroom-app) must be compiled to jars first
//    //so stroom-app can access their code
//    //However, generateSwaggerDocumentation must run before stroom-app:jar as its artefacts (the json/yaml spec files)
//    // need to go into that jar
//    tasks.getByPath(':stroom-core-module:generateSwaggerDocumentation').mustRunAfter jar
//}


task clearContentPackImportDir(type: Delete) {
    //ensure the import directory exists
    new File(contentPackImportDir).mkdirs()

    //cleans out any zip files in the contentPackImportDir
    delete fileTree(new File(contentPackImportDir)) {
        include '**/*.zip'
    }
}

task clearContentPackDownloadDir(type: Delete) {
    //ensure the import directory exists
    new File(contentPackDownloadDir).mkdirs()

    //cleans out any zip files in the contentPackImportDir
    delete fileTree(new File(contentPackDownloadDir)) {
        include '**/*.zip'
    }
}

task downloadStroomContent() {

    dependsOn clearContentPackDownloadDir

    doLast {
        //download each content pack to the contentPackImportDir ready for stroom to import on startup
        for (pack in contentPacks) {
            def packName = pack.key
            def packVer = pack.value
            def packUrl = "${contentReleasesUrl}${packName}-${packVer}/${packName}-${packVer}.zip"
            download {
                src packUrl
                dest new File(contentPackDownloadDir)
                overwrite true
            }
        }
        //now get the visualisations pack from a different repo
        download {
            src visualisationsContentPackUrl
            dest new File(contentPackDownloadDir)
            overwrite true
        }
    }
}

task copyContentPacksToImportDir(type: Copy) {
    dependsOn clearContentPackImportDir
    dependsOn downloadStroomContent

    println "Configuring copy from ${contentPackDownloadDir} to ${contentPackImportDir}"

    from "${contentPackDownloadDir}"
    into stroomContentImportDir
}

task setupSampleData() {
    dependsOn copyContentPacksToImportDir
    dependsOn ':stroom-integrationtest:setupSampleDataApplication'
}

gradle.buildFinished {
    //if any of the tests failed dump the junit xml to the console
    if (getPropertyOrDefault('dumpFailedTestXml', 'false') == 'true' && failedTestReportFiles.size() > 0) {
        println "Build has ${failedTestReportFiles.size()} failed test classes, dumping JUnit xml output"
        failedTestReportFiles.each { pair -> 
            def info = pair.first
            def reportFile = pair.second

            if (reportFile.exists()) {
                println "-----Failed test class ${info} ------------------"
                def lines = reportFile.readLines()
                lines.each { String line -> 
                    println "${line}"
                }
                println "-----End of test class ${info} ------------------"
            } else {
                println "File ${reportFile.toString()}"
            }
        }
    }
}

